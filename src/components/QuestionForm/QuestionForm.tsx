import React, { useState, useEffect } from 'react';
import InputMask from 'react-input-mask';
import axios from 'axios';
import styles from './QuestionForm.module.css';

interface QuestionFormProps {
  isOpen: boolean;
  onClose: () => void;
}

export const QuestionForm: React.FC<QuestionFormProps> = ({ isOpen, onClose }) => {
  const [formData, setFormData] = useState({
    name: '',
    phone: '',
    telegram: '',
    question: ''
  });
  const [showSuccess, setShowSuccess] = useState(false);
  const [errors, setErrors] = useState({
    name: '',
    phone: '',
    telegram: '',
    question: ''
  });
  const [chatId, setChatId] = useState<string | null>(null);

  // –º–∞—Å—Å–∏–≤ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ - —Ç–∞–∫–æ–π –∂–µ –∫–∞–∫ –≤ CartPage
  const adminChatIds: string[] = ['522814078', '6684292595'];

  useEffect(() => {
    const tg = (window as any).Telegram?.WebApp;
    if (tg?.initDataUnsafe?.user?.id) {
      setChatId(tg.initDataUnsafe.user.id.toString());
      tg.ready?.();
    }
  }, []);

  const validateForm = () => {
    const newErrors = {
      name: '',
      phone: '',
      telegram: '',
      question: ''
    };

    if (!formData.name.trim()) {
      newErrors.name = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è';
    }
    
    const phoneNumber = formData.phone.replace(/\D/g, '');
    if (!phoneNumber) {
      newErrors.phone = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
    } else if (phoneNumber.length !== 11) {
      newErrors.phone = '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä';
    }
    
    if (!formData.telegram.trim()) {
      newErrors.telegram = '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ username';
    } else if (!formData.telegram.startsWith('@')) {
      newErrors.telegram = 'Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @';
    }
    
    if (!formData.question.trim()) {
      newErrors.question = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å';
    }

    setErrors(newErrors);
    return !Object.values(newErrors).some(error => error);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (validateForm()) {
      try {
        await sendFormData();
        setShowSuccess(true);
        setTimeout(() => {
          setShowSuccess(false);
          resetForm();
          onClose();
        }, 2000);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã:', error);
      }
    }
  };

  const resetForm = () => {
    setFormData({
      name: '',
      phone: '',
      telegram: '',
      question: ''
    });
  };

  const sendFormData = async () => {
    if (!chatId) {
      console.error('Chat ID –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
      return;
    }

    // 1) –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚Äî –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    const adminMessage =
      `üîî –ó–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n\n` +
      `üë§ –ò–º—è: ${formData.name}\n` +
      `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}\n` +
      `üì® Telegram: ${formData.telegram}\n\n` +
      `‚ùì –í–æ–ø—Ä–æ—Å:\n${formData.question}`;

    // 2) –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const userMessage =
      `–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É!\n\n` +
      `–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.\n\n` +
      `üìù –í–∞—à –≤–æ–ø—Ä–æ—Å:\n${formData.question}`;

    try {
      // –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
      await Promise.all(
        adminChatIds.map(id =>
          axios.post(
            `https://celebrity-strike.duckdns.org/api/v1/chat/send-message/${id}`,
            { message: adminMessage }
          )
        )
      );

      // –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await axios.post(
        `https://celebrity-strike.duckdns.org/api/v1/chat/send-message/${chatId}`,
        { message: userMessage }
      );
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
      throw err;
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –≤–≤–æ–¥–µ
    if (errors[name as keyof typeof errors]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  if (!isOpen) return null;

  return (
    <div className={styles.modalOverlay}>
      <div className={styles.modal}>
        <button className={styles.closeButton} onClick={onClose}>√ó</button>
        <h2 className={styles.title}>–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å</h2>
        <form onSubmit={handleSubmit} className={styles.form} noValidate>
          <div className={styles.inputGroup}>
            <label htmlFor="name">–ò–º—è</label>
            <input
              type="text"
              id="name"
              name="name"
              value={formData.name}
              onChange={handleChange}
              required
              placeholder="–í–∞—à–µ –∏–º—è"
            />
            {errors.name && <div className={styles.errorMessage}>{errors.name}</div>}
          </div>
          <div className={styles.inputGroup}>
            <label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω</label>
            <InputMask
              mask="+7 (999) 999-99-99"
              id="phone"
              name="phone"
              value={formData.phone}
              onChange={handleChange}
              required
              placeholder="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
            />
            {errors.phone && <div className={styles.errorMessage}>{errors.phone}</div>}
          </div>
          <div className={styles.inputGroup}>
            <label htmlFor="telegram">Telegram</label>
            <input
              type="text"
              id="telegram"
              name="telegram"
              value={formData.telegram}
              onChange={handleChange}
              required
              placeholder="@username"
            />
            {errors.telegram && <div className={styles.errorMessage}>{errors.telegram}</div>}
          </div>
          <div className={styles.inputGroup}>
            <label htmlFor="question">–í–∞—à –≤–æ–ø—Ä–æ—Å</label>
            <textarea
              id="question"
              name="question"
              value={formData.question}
              onChange={handleChange}
              required
              placeholder="–í–∞—à –≤–æ–ø—Ä–æ—Å"
            />
            {errors.question && <div className={styles.errorMessage}>{errors.question}</div>}
          </div>
          <button type="submit" className={styles.submitButton}>
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å
          </button>
        </form>
        {showSuccess && (
          <div className={styles.successPopup}>
            –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
          </div>
        )}
      </div>
    </div>
  );
}; 